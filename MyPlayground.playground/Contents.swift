import UIKit
import Accelerate



// set window / length of array for MAV, RMS, MNF, MDF calculations
let lengthOfArray = 128

//let emgData: [[Double]] = [[-1, -2, -2, -1, -8, -4, -1, -1], [1, -1, -2, 0, 1, 8, 0, -1], [-2, 0, 0, -1, -4, -17, -3, -2], [0, 0, 3, 0, 4, 8, 0, 1], [-1, -2, 0, 1, 0, -8, 0, -1], [-2, -3, 0, -3, 0, 9, 0, -2], [-1, -1, -3, -2, -3, -8, -1, -2], [-1, -1, -2, -1, 0, 3, 0, 1], [-2, -1, -2, -3, -1, 2, -1, -2], [-2, -2, -1, 0, 1, -35, -2, 1], [-2, 0, 0, -1, 1, 10, -1, -1], [-1, -2, -1, -1, -2, 9, -1, 0], [-2, -1, -2, -1, -1, -7, -2, -2], [0, 0, -1, 0, 2, -1, 0, 0], [0, 1, -2, 1, -2, 10, 1, 0], [-3, -3, -3, 0, -1, -3, -1, -1], [-1, 0, 0, -1, 1, -6, 1, 0], [1, -2, 0, -1, 5, 20, -1, -1], [-3, -3, 1, -2, -6, -13, -2, -1], [0, -1, -1, 2, 0, -39, -4, 0], [-1, -2, -2, -1, -2, 5, -2, -2], [-2, 0, 2, -1, 1, 7, 0, 1], [-1, -3, -2, -3, 0, 0, -2, -1], [1, -1, -1, -1, -4, 4, 0, -1], [-1, -1, 0, -1, -1, -15, -1, 1], [-1, -1, -1, 0, 0, -1, -1, 0], [0, -4, 1, 0, 1, 11, 1, -1], [-2, 0, -1, -2, -6, -14, -2, -1], [-1, -1, 0, -1, 2, 9, 0, 0], [0, 0, -2, 0, -3, 14, 1, -2], [-2, -2, -1, -1, -3, -25, -4, -3], [-1, -1, -2, 1, 2, 7, 0, -1], [-1, -1, 0, -2, -3, -8, -4, -3], [-2, -1, -1, -3, -1, 3, 0, -2], [0, 0, -1, -2, -1, -4, -1, 0], [-1, -1, 0, 1, 1, 7, 2, -1], [-3, -3, -3, 0, 3, -5, -3, 0], [-2, -1, -3, -1, -8, -1, 1, 0], [-1, -1, -2, 1, 0, 4, 1, 1], [-3, -2, -1, -1, 1, 7, 0, -1], [0, -2, -2, -2, -6, 0, -3, -1], [-2, -2, -1, 0, 2, -1, -1, 0], [-1, -1, 0, -1, -1, -1, -2, -1], [0, 0, 1, -2, 0, 2, 3, -1], [-2, -2, -1, 0, -2, -3, -2, -2], [-2, -1, -2, -1, -3, -4, -3, 0], [-1, 1, 0, -2, 0, -2, 0, -1], [-1, -1, 0, 0, 2, 17, 1, -1], [-1, -3, -2, -2, -2, -4, -1, 0], [0, -2, -1, 0, 0, 11, 1, 0], [-2, -1, -2, -2, 0, -39, 0, 1], [0, -1, -3, -1, -4, -1, -3, -2], [0, 0, -3, 0, -2, -5, 0, 0], [0, -1, -2, 0, 4, 9, 0, -2], [-2, 1, 1, -2, 1, 10, 0, 0], [-3, -2, -4, -5, -12, -15, -4, -2], [-2, 0, 0, 0, -2, -15, -3, -5], [0, 1, 0, 0, 3, 26, 1, 1], [-3, -5, -4, -3, -5, -5, -3, -3], [-1, -1, -1, -3, 2, -3, -1, 0], [-1, 0, 0, -1, 1, 6, 1, 0], [-1, 1, 0, -2, -1, -4, 0, -1], [0, -1, -1, 0, 1, -22, 0, 0], [-3, -2, -2, -1, -5, 7, -1, 0], [-1, -2, -1, 0, -2, -17, 0, 0], [-2, 0, -1, -2, -1, 3, -3, -2], [0, -1, -1, -2, 2, 22, 1, -2], [0, -1, 1, 0, 2, -4, 1, 0], [-1, 0, 0, -2, -2, 10, -2, 0], [-2, -2, -1, 0, -2, -13, -2, -1], [-2, -1, 0, 1, -2, 9, 0, -1], [0, 1, 0, 0, 3, -5, 2, 0], [-1, -2, -4, -3, 0, 7, 1, 0], [0, -3, -2, -1, -2, -13, -2, -1], [-1, -2, -2, -2, 0, 20, -2, -2], [-1, 0, 1, -1, -3, -3, -2, -1], [-1, 0, 0, 1, -2, -1, -3, -3], [-3, -2, -2, 0, -3, -14, -1, -2], [0, -1, -3, 0, -2, -1, -1, -1], [-1, -1, -1, -1, 1, 11, -1, -1], [0, -2, -1, -3, 3, 1, 0, 0], [0, -1, 0, -2, -4, -7, 2, -1], [-1, 0, 0, 1, -1, 9, -1, -1], [-3, -3, -1, -3, -4, -28, -4, -3], [0, 0, 0, 1, -3, 2, 2, 0], [0, -3, 1, -2, 0, 3, -1, -2], [0, -1, -1, -1, -1, 10, 1, 2], [-1, -1, -3, -1, -3, -35, -6, -1], [-2, -2, -1, -1, 3, -1, 0, -1], [-1, 0, -1, -1, -3, -17, -2, -1], [-2, -2, -1, -1, 4, 21, 1, -2], [-2, -2, 0, 0, -4, 7, 1, -2], [0, -1, 0, 0, -4, -9, -2, 0], [0, -1, -3, 0, 3, 11, 2, -1], [-1, -1, 0, -1, -3, -12, -2, -1], [-2, -2, -1, -2, -2, 14, -1, -2], [-2, -1, 0, 0, 0, -2, -2, -2], [0, -1, 0, -2, -5, -1, 0, 2], [-1, 1, -1, -1, 3, -2, -3, -1], [-1, -1, -2, -1, 3, 8, -2, -1], [-1, -1, -1, -2, -1, 4, 0, -1], [0, -3, -2, -2, 0, -19, -3, -2], [-1, -1, -3, -4, -7, 2, -2, -2], [0, -2, 1, 0, -3, 2, 1, -2], [-1, 0, -3, 0, 4, 14, -1, -3], [-1, 1, -1, 0, 0, 28, -1, -1], [1, -1, -1, 0, -1, -8, -1, -1], [0, -1, -1, -1, -2, -1, -2, 0], [-1, -3, -1, 1, 0, 5, 1, 0], [-2, -2, -1, 1, 5, -5, -3, -1], [-2, -3, -1, -1, -3, -5, 0, -2], [-1, 0, 0, -3, -1, 12, -1, -2], [0, 0, -1, -1, -4, -11, -2, -2], [-3, -1, 0, 0, -3, -2, -2, -2], [-1, -1, 0, 0, -2, -5, -1, 1], [0, 0, 0, 1, 2, -1, -1, -1], [-2, -2, 0, -1, 1, -2, -1, -1], [-1, -2, -2, -2, -5, -12, -2, 1], [-2, 2, 0, 1, -3, -16, 0, 0], [0, 0, -1, -2, 6, 39, 2, -1], [-1, -2, 0, -1, -7, -10, -1, 0], [-1, -2, -2, -2, 1, 7, 2, -1], [-1, -1, -1, 0, -2, 0, -2, -2], [-1, -1, 0, 0, -1, -31, 0, 0], [-3, -2, -1, 1, -1, -34, -3, -1], [-1, -1, -1, -2, -1, 6, 2, -1], [-2, -3, -1, -2, -4, -9, -4, -1], [0, -1, 0, 1, 3, -3, -1, -1]]

//let emgData2: [[Double]] = [[-2, -1, -3, -4, -7, 9, 1, -2], [-3, 1, 0, 0, 0, -15, -2, -3], [-1, -2, -1, -2, 0, 2, -1, -2], [-1, -2, -2, -3, -3, 8, -1, -2], [-2, -1, -2, -2, 0, 2, -2, -2], [1, -2, 0, -2, 1, -4, -1, -2], [0, 0, -2, -1, -4, 17, 0, 1], [0, -3, -2, -1, 1, -7, -3, -2], [1, 1, 2, -1, -2, -1, 1, 0], [-1, 0, 0, -2, 1, 0, -1, 0], [-2, -2, -1, -2, -2, -1, 0, -1], [-2, 0, -2, -2, -3, -13, -1, -1], [0, -1, -2, -2, 1, 10, -1, -2], [0, 0, 0, 0, 4, 25, 0, -1], [-1, -2, -1, -1, -4, -34, 2, -1], [1, 0, -2, 2, 3, 15, 1, 1], [-2, -2, -2, -4, -7, -6, -1, -2], [-1, -1, 0, 0, -2, 5, 0, 0], [-1, 0, 0, -1, 4, -27, -4, -1], [0, -1, -2, -2, -6, 3, -2, -4], [1, -1, -2, 0, 3, 1, 0, -1], [-1, -2, -3, -4, -3, -1, -1, -2], [-1, -2, -2, 0, 1, 8, 0, 0], [-3, 0, 0, -1, -5, -7, -1, 1], [0, -2, 0, 1, 6, 7, -3, 0], [1, -2, -1, -1, -4, -3, -1, 0], [-1, -1, 0, 0, -2, 1, 0, -3], [0, 0, 0, 0, 1, -4, -2, -1], [-1, 0, -3, 1, -1, 11, 1, -1], [-1, -1, 0, -2, -3, -14, -4, -1], [0, -1, -2, -2, 0, 21, 1, -2], [0, -3, 0, 0, 2, -1, -2, -2], [-1, -2, -1, -1, -2, -7, -1, -2], [-2, -2, -2, 0, -1, -1, -1, 2], [-1, -1, -1, -3, -2, -22, -2, -2], [-2, 0, -2, -2, 0, 1, -3, -1], [1, 0, 1, -3, 4, 0, -1, 0], [-1, -1, 1, -2, -15, -20, -2, -2], [1, 0, -2, 1, 7, 10, 2, 1], [1, -3, -2, -1, -8, 7, 0, -2], [2, 0, -2, -1, 2, 5, 1, 2], [-2, -1, -2, -2, 1, 1, 0, -1], [-2, 0, -1, 0, 0, 14, 0, 0], [-1, -1, 0, -1, -3, -10, -2, -2], [0, 0, -1, 1, -1, 5, 0, -1], [-1, 0, 0, -1, 1, 8, -2, -3], [-2, -2, -3, -1, -2, 1, -3, -2], [-1, -3, -1, 0, 1, -2, 2, 1], [-1, -4, 0, -1, -3, -9, -4, -2], [1, 0, -3, -2, 0, -5, -1, -3], [-1, -2, -1, -4, -6, -4, -2, -2], [-2, 1, -1, 0, 0, 1, 0, -1], [-2, -1, -1, -1, 1, -4, 0, -2], [-2, -4, -2, -2, -9, -5, -3, -1], [0, -1, 0, 1, 1, 8, 0, 1], [0, 0, 0, -2, -1, -8, 0, -1], [-1, 0, -1, 1, 1, 7, -1, 1], [0, -1, -1, 0, 5, 3, 1, -1], [-2, -1, -2, -2, -14, -6, 0, -2], [-3, -2, -2, -1, 1, -2, 0, 0], [-1, 0, -1, -1, -4, -12, -1, -1], [-2, 0, -1, 0, 4, 14, -1, 1], [-2, 0, -3, 0, 2, -2, -1, 1], [-2, -1, 0, -3, 0, -4, -2, -2], [-1, -3, -1, -3, -2, -9, 0, -3], [-1, 0, -1, 0, -2, 6, 2, 0], [0, -2, 0, -1, 1, 4, -4, -4], [0, 0, -1, -2, -2, 2, 0, -1], [-1, -1, -2, -1, -1, 4, 0, 0], [-1, 0, 1, 0, 1, 1, -1, -1], [-3, -2, -1, 0, -1, -8, -3, -1], [-1, 0, -2, 0, 1, 17, 0, 1], [-1, -2, 1, -2, -1, -10, -2, -2], [0, -2, -3, 1, 0, -2, 1, 0], [-2, 0, -1, -2, 5, -4, -1, 0], [-1, -3, -3, -1, 0, 1, -1, -1], [-2, -2, -2, -1, -9, 0, 0, -2], [-2, -2, -1, -1, -5, 0, -2, -2], [1, 0, 0, -1, 4, 13, 1, 1], [0, 0, 0, -1, -1, -1, -1, -1], [-2, -2, -3, 0, 0, -13, -3, -1], [0, -1, 0, -1, 1, -9, -2, -1], [-1, -1, -2, -3, -5, 3, -1, -2], [0, -1, 0, 0, -1, 3, -1, 0], [0, -2, -1, 0, 0, 5, -2, -3], [-1, 0, -1, -4, 0, -8, -2, -1], [0, -1, -1, 0, -1, -1, 0, 1], [-3, -3, -1, -2, -5, -7, -1, -2], [0, -1, -1, -1, 1, 14, 1, 1], [-3, -3, -1, -3, 0, 4, -2, -1], [-1, -1, -1, -1, -7, -15, -2, -4], [-3, -1, -2, -2, -3, -2, -3, -1], [0, -1, -1, 0, 0, 1, 0, 0], [1, -1, 1, -1, -3, -3, -2, -1], [0, 1, 0, -2, -3, 2, -1, 0], [0, 0, 0, 0, 3, -7, 0, 0], [-1, -1, -1, -1, -11, 4, -5, -1], [1, -2, -3, 1, -1, -10, -1, -1], [0, -2, -3, -1, -2, 4, -2, -2], [-2, -2, -2, -3, 5, 12, -2, -1], [0, -1, -2, -1, -3, -24, -1, -2], [-1, 1, -2, -2, -2, 7, 2, -1], [-2, -2, -1, -1, -1, -13, -3, -2], [0, 1, 0, 1, -1, -9, 1, 0], [-1, -3, -1, -2, 0, 16, -1, 1], [-1, -1, -1, 0, 2, -3, -4, -3], [-3, -4, -3, 0, -3, 11, 3, -1], [-1, -1, 0, -2, -7, -47, -2, -1], [-3, -1, 0, -1, 2, -3, 0, -1], [-3, -1, 0, 0, 6, 0, 0, -1], [-1, 0, 0, -2, 2, 1, 0, -1], [-1, 0, -2, 0, 0, 3, -2, -3], [-1, 1, 0, -2, -2, -2, 0, 1], [-1, -2, -1, -2, -3, -12, -2, -2], [1, -2, 0, -2, 5, 12, 1, -2], [0, -1, -1, -1, -6, 8, 1, -1], [0, -2, -2, -1, 3, -1, -2, -1], [-1, -1, -2, 0, -4, 4, 0, 0], [-2, 0, -1, -1, -2, -9, -4, 0], [0, -4, -1, -2, 2, 5, 0, -2], [-2, 0, -1, -1, 0, 3, 1, 0], [-3, -3, -2, -1, 0, -17, -2, -2], [-1, -1, -1, -1, -3, -4, -1, -1], [0, 0, 0, -1, 1, 5, -1, 0], [-3, -2, -3, -1, -5, -7, -3, -2], [1, 1, -1, -1, -2, -1, 2, -1], [0, 0, -1, -2, 0, -1, -1, 0], [-2, -1, -1, -1, -1, 2, -5, -3]]

//let electrode_1: [Double] = [-1, 1, -2, 0, -1, -2, -1, -1, -2, -2, -2, -1, -2, 0, 0, -3, -1, 1, -3, 0, -1, -2, -1, 1, -1, -1, 0, -2, -1, 0, -2, -1, -1, -2, 0, -1, -3, -2, -1, -3, 0, -2, -1, 0, -2, -2, -1, -1, -1, 0, -2, 0, 0, 0, -2, -3, -2, 0, -3, -1, -1, -1, 0, -3, -1, -2, 0, 0, -1, -2, -2, 0, -1, 0, -1, -1, -1, -3, 0, -1, 0, 0, -1, -3, 0, 0, 0, -1, -2, -1, -2, -2, 0, 0, -1, -2, -2, 0, -1, -1, -1, 0, -1, 0, -1, -1, 1, 0, -1, -2, -2, -1, 0, -3, -1, 0, -2, -1, -2, 0, -1, -1, -1, -1, -3, -1, -2, 0]



let test_mnf: [[Double]] = [[55.5596007887237, 54.2375159210408, 47.6796629892766, 51.130368190053, 63.0908803008395, 60.5011228322655, 60.9877503394053, 53.3791151645986], [45.228638001758, 55.1161457612794, 51.055351460846, 56.6482535295314, 65.4564896519228, 62.4656185419309, 61.3060086179177, 55.0780405391491], [57.5166841799687, 54.9237064405736, 49.6845678037701, 50.8045275349739, 65.126556766021, 67.7354638520542, 49.3977470993215, 46.1710930054974], [49.0697704650318, 54.2702046874268, 44.9592263642301, 48.6692881833107, 63.4317255661427, 63.1092857681094, 57.8834075525049, 51.5171711450828], [51.6898634023226, 50.5066163016335, 52.5748243746469, 54.0582439455875, 62.5331450220618, 66.5199346291686, 57.4523065743264, 52.0446078175644], [53.9903025042967, 51.920610175813, 46.8636301074693, 46.1643379885833, 55.4162496670956, 60.348946187089, 56.4049291258551, 47.6679922263434], [54.605689182488, 52.2026282513958, 50.4227291726989, 51.4170525670733, 62.2634644161702, 62.1954790188353, 59.115121079896, 48.7783890097288], [49.9777404515931, 55.4583413044478, 49.0711550977878, 56.3097243088001, 61.8668742525243, 62.2378454287136, 60.1396490993008, 52.4707404909537], [52.7091243417695, 51.2452551811556, 55.623478289999, 48.6089158753623, 58.831795478797, 67.9898049202685, 53.5792469128845, 45.5672587260977], [49.1496610791218, 50.1889843282187, 45.6654214190128, 46.589959712723, 58.2929026049004, 64.4838187121377, 48.268906498801, 45.2740121505824], [51.2965372500563, 48.5317830658957, 42.829600465658, 53.4599610867375, 56.5431574630264, 57.9627976634465, 51.2214485540541, 54.1220051355123], [45.2466273468714, 50.3521682248226, 44.2843169973303, 48.2670717105757, 64.5380789985453, 63.4382619573808, 61.4709715639819, 50.3816875988703], [49.4683752490302, 55.0856461772311, 55.0465053080375, 57.5608427521321, 63.6724392714485, 65.0487251569531, 58.0224621315145, 44.0351380902358], [57.6149866722181, 53.2586104147988, 52.4769333098737, 52.3841163903756, 63.7725940133911, 62.0929294594112, 62.6721739975173, 50.7321034378114], [45.1768349998082, 49.4541659697281, 51.9882206768503, 51.678647145021, 59.7993693997657, 60.0864805181659, 53.9859103326807, 56.9371541810469], [48.5491629426449, 48.1071340905169, 50.3722288821651, 49.9617083368893, 66.8279414417147, 59.7183598753296, 54.433588758967, 50.009459256765], [48.2370200522905, 49.4824567269719, 48.8581087298825, 51.5240962895261, 58.1068560759427, 63.52073574552, 56.981539473778, 53.096121383416], [49.8493810962407, 43.7229595389618, 48.2289949446279, 44.9643412828789, 60.853131791566, 62.3676431887153, 57.6359164138214, 52.1073368081387], [47.5677975970523, 54.4241114617478, 52.035950336517, 59.2081476596114, 56.2124660638096, 60.9225201879968, 58.087330254879, 50.5248313319091], [53.0408457262664, 50.6822098792777, 52.6015037182094, 51.9302868233475, 63.2507898258087, 64.1840408229065, 61.8933595909698, 51.9728625832477], [54.4715640777592, 53.4899270730946, 48.0214170149368, 56.7787572973657, 67.3482419838383, 62.9122468892607, 57.9771362939112, 42.108885964324], [50.5493613699665, 46.9280764432775, 46.2552473014525, 46.4393042097684, 57.1251038255008, 65.4883783101481, 54.4475160469339, 49.802418736174], [49.3988211312257, 52.9437260801015, 54.2578380390784, 56.1400450677865, 67.8486891312679, 65.071196468523, 60.7857722679925, 48.4461126847188], [56.4057111921246, 51.9635179220975, 51.2027358375124, 52.0352967461946, 64.7590349636039, 63.5256607688741, 57.858613088777, 55.8011967585755], [47.682028795439, 55.9003246807838, 48.7504523709044, 55.3147925046814, 60.6350618151266, 67.2817034836406, 52.2843537376408, 56.6161675717659], [46.6326564980704, 44.6608071538764, 47.6536879386394, 53.8993192090648, 59.6602727783982, 65.9776546218948, 54.6835791982482, 43.9133518338862], [49.1484845165326, 51.6544977596461, 45.320554855357, 48.5061278375897, 61.8305842354618, 62.1074769532521, 53.4102824597645, 54.3303301182991], [55.2720064919316, 47.9371670993092, 51.1668727650937, 56.0080196285854, 62.0665078168841, 64.2568852072678, 53.2858512377097, 53.6240137565309], [52.0671509198623, 51.8132285859866, 43.4121044331147, 54.8257983934178, 57.5601640147768, 63.5265326623025, 57.2083817914741, 59.0098578884642], [47.2726699411203, 47.7776735953478, 51.6045122907577, 47.3415480008262, 65.8947270062208, 65.2437703883323, 59.4043366172257, 54.1006272760618], [51.9928932639782, 49.5116912575878, 49.6033084063168, 57.795018437425, 59.3184089188568, 56.9540499287415, 55.0633239085361, 51.9478623365369], [52.4042119625864, 52.132892458226, 42.5842003766985, 49.5950629067824, 62.6474411846478, 58.891195250769, 54.9735721668651, 50.9082227985671], [56.4423981127212, 43.8519784456551, 49.8766135060602, 59.1715115439452, 63.7195292547753, 61.1271100130014, 55.96289840867, 50.1490421282586], [51.6813444528882, 53.0806851541834, 50.6782343389396, 52.5560330129675, 67.5207546290841, 67.0876281488917, 59.4117622008108, 53.8578716216029], [51.2589585320779, 49.5852455017753, 54.555708769188, 56.9212552883468, 61.9680832071724, 64.401760824037, 57.833735388709, 43.6444678120325], [59.5894780765655, 52.8273687349618, 50.0447491574921, 47.8285344093122, 61.096485035291, 59.7139317577549, 48.2796848076333, 61.8051044609062], [51.2174080482705, 53.0452239722427, 54.3298368762757, 52.6313567387798, 60.5144630115895, 66.0687875777722, 59.4933253222285, 54.7663127939005], [49.7280079887503, 49.0635423082225, 49.0645161474437, 52.4110160446619, 62.4060994232608, 71.8332840555825, 58.0745806061898, 50.5891583518157], [52.8865447642278, 47.6698260820047, 50.2259533337043, 52.7281308549328, 62.0784971955707, 64.0982809066663, 62.1084192817369, 51.7837961768221], [48.0243439988025, 49.8139374196692, 52.5552117264226, 48.2876193907798, 64.8031472722229, 62.5128125100865, 55.947130024483, 44.7550280117875], [52.7409721951128, 51.6950382617377, 50.7241015718863, 56.9151596793389, 65.028164161145, 64.273267980406, 51.9303235074311, 52.2938796294868], [58.1264087326395, 50.4186147176789, 56.2723329102047, 56.99669542677, 63.4554341082732, 61.6160186124623, 53.9728508176686, 46.5921663796906], [54.1825878037975, 44.7161169804388, 52.941821047687, 49.9084328424841, 58.7484208345443, 65.3007939051661, 56.6354477063041, 51.5802328309988], [52.0133875386568, 50.168675554344, 47.579185746837, 51.6598794686893, 63.9779738163482, 64.6316443966846, 60.1862560200808, 49.4722668907237], [49.8736287437853, 55.4883588171493, 53.7702407324398, 55.894634154116, 54.7486952754284, 62.1008781540764, 56.786613925202, 46.3846406153327], [56.2443517638744, 54.7782663110732, 54.0366072624423, 53.1777527850686, 49.6216427002727, 63.5264769218256, 52.3902779279807, 54.3522681656964], [48.2897202532094, 52.2500056125651, 47.8931836163513, 47.8688539317511, 47.9419412069183, 64.4211731180369, 55.8659125146385, 57.5443504562519], [54.1021273789688, 56.1940060721851, 50.5121816840211, 48.6093367916643, 53.5016838718141, 63.8988483110405, 56.3664266892048, 49.1302058017796], [57.9624393281083, 61.1124630584457, 53.3646372501717, 54.5905889737804, 50.0565247868266, 65.6990995130243, 55.7383670484921, 56.1876313627841], [58.1914199272739, 57.4864117393886, 55.4434539108976, 46.4840569706364, 48.5356193645563, 59.0793730245925, 54.6723614539081, 52.6694536727698], [45.5901805304391, 53.9562787970806, 53.9897473455374, 54.5047109175534, 59.3740710360151, 66.5560722791005, 54.2381255660252, 51.1645931431436], [43.1964276335869, 56.1382150432317, 50.1613787801621, 49.1183497077361, 48.5507903215996, 66.3103390740432, 49.6275035517607, 54.6697369526951], [52.2715207113412, 51.7788047238568, 49.6091342784431, 48.6963603812192, 65.0994208474305, 61.2674067511748, 63.4181207164842, 50.7976894736169], [52.3518966180552, 57.8927613242227, 50.8875102349158, 53.4984563366075, 53.5710689650319, 62.1648219919238, 60.6010023624843, 56.8527465608178], [52.4910757335766, 51.4424186988631, 50.2770182875592, 49.7344733723586, 62.7298023035913, 64.4375868675283, 64.1915572858698, 54.9130877878952], [50.2587030244878, 51.2448573621034, 57.2303913013874, 51.9560319773182, 65.0367059780723, 65.5258898542776, 58.7229103579882, 47.012627612722], [55.8265754413473, 51.726302100559, 52.5760007867323, 59.1936661722338, 63.0951144893162, 65.4524479793691, 59.8901068294092, 49.3847787572758], [51.8869281349481, 48.2154944231846, 45.4251976700922, 54.5223642843281, 59.1474299922409, 64.103266051179, 55.5357018890033, 48.1004255504065], [51.5584394979615, 48.2127333523034, 49.9582698034904, 52.7164858768198, 64.3522447872223, 68.1396428390958, 56.0546614829827, 50.7370120157678], [47.6451439349529, 55.7677709762312, 46.7383771018824, 57.1308243176145, 62.3305830901154, 63.5935246598645, 58.5687386483403, 55.6394463172535]]



var power = [[Double]](count: lengthOfArray-1, repeatedValue: [Double](count: 8, repeatedValue: 0))
var meanAvgVal: [[Double]] = []
var rootMeanSqr: [[Double]] = []
var meanFreq: [[Double]] = []
var medFreq: [[Double]] = []




// function to extract a column array from 2D array
func extractCol(array: [[Double]], electrode: Int) -> [Double] {
    
    var colVector: [Double] = []
    
    for i in 0...(array.count-1) {
        colVector.append(array[i][electrode-1])
    }
    
    return colVector
}



// function to compute mean of array
public func mean(x: [Double]) -> Double {
    var result: Double = 0.0
    vDSP_meanvD(x, 1, &result, vDSP_Length(x.count))
    
    return result
}
    
    

// function for element-wise multiplication
public func mul(x: [Double], y: [Double]) -> [Double] {
    var results = [Double](count: x.count, repeatedValue: 0.0)
    vDSP_vmulD(x, 1, y, 1, &results, 1, vDSP_Length(x.count))
    
    return results
}


// function to calculate MAV
func calMeanAverageValue(input: [[Double]])
{
    var row = [Double]()
    //var temp = [Double]()
    
    for i in 1...8 {
        
        //var result: Double = 0
        //temp = extractCol(input, electrode: i)
        //vDSP_meanvD(temp, 1, &result, vDSP_Length(temp.count))
        //mean(extractCol(input, electrode: i))
        
        //row.append(result)
        row.append(mean(extractCol(input, electrode: i)))
    }
    
    meanAvgVal.append(row)
}







// function to calculate RMS
func calRootMeanSquare(data: [[Double]])
{
    var row = [Double]()
    
    for i in 1...8 {
        
        let tempVec = extractCol(data, electrode: i)
        
        let sq_amp = mul(tempVec, y: tempVec)
        let sum = sq_amp.reduce(0, combine: +)
        
        row.append(sqrt(sum/Double(tempVec.count)))
    }
    
    rootMeanSqr.append(row)
    
}











// function to perform FFT
// length of input vector has to be power of 2 (128 for Gymbuddy, i.e. around 30s)
// returns POWER i.e. square of FFT magnitudes
public func fft(input: [Double]) -> [Double] {
    
    var real = [Double](input)
    var imaginary = [Double](count: input.count, repeatedValue: 0.0)
    var splitComplex = DSPDoubleSplitComplex(realp: &real, imagp: &imaginary)
    
    let length = vDSP_Length(floor(log2(Float(input.count))))
    let radix = FFTRadix(kFFTRadix2)
    let weights = vDSP_create_fftsetupD(length, radix)
    
    vDSP_fft_zipD(weights, &splitComplex, 1, length, FFTDirection(FFT_FORWARD))
    
    var magnitudes = [Double](count: input.count, repeatedValue: 0.0)
    vDSP_zvmagsD(&splitComplex, 1, &magnitudes, 1, vDSP_Length(input.count))
    
    vDSP_destroy_fftsetupD(weights)
    
    //return sqrt(magnitudes)
    return magnitudes
}






// function to compute power array
func computeFFT(array: [[Double]]){
    
    var tempVec: [Double] = []
    var tempVec_fft: [Double] = []
    
    for i in 1...8{
        
        tempVec = extractCol(array, electrode: i)
        tempVec_fft = fft(tempVec)
        
        // remove peak at 0
        tempVec_fft.removeAtIndex(0)
        
        for j in 0..<(lengthOfArray-1) {
            power[j][i-1] = tempVec_fft[j]
        }
        
        tempVec.removeAll()
        tempVec_fft.removeAll()
    }
    
}





// function to compute mean freq
func calMeanFreq(power_array: [[Double]]){
    
    // freq = 0: (fs/100) : nyquist
    // mean freq = sum(freq .* power)/sum(power)
    // single sided power spectrum used to calculate MNF
    
    var tempVec: [Double] = []
    var sumPower = 0.0
    var sumFreqPower = 0.0
    var row = [Double]()

    let tempFreq = (0..<lengthOfArray/2).map{i in i*2}
    let freq = tempFreq.map({Double($0)})
    
    var results = [Double](count: lengthOfArray/2, repeatedValue: 0.0)
    
    for i in 1...8{
        
        tempVec = extractCol(power_array, electrode: i)
        let truncatedVec = Array(tempVec[0...63])
        results = mul(truncatedVec, y: freq)

        sumFreqPower = results.reduce(0, combine:+)
        sumPower = truncatedVec.reduce(0, combine:+)
        
        row.append(sumFreqPower/sumPower)
        sumFreqPower = 0.0
        sumPower = 0.0
        
        
    }
    
    meanFreq.append(row)
}



// function to compute median freq
func calMedFreq(power_array: [[Double]]){
    
    // freq = 0: (fs/100) : nyquist
    // med freq = 0.5 * sum(power)
    // single sided power spectrum used to calculate MDF
    
    var tempVec: [Double] = []
    var tempSum = 0.0
    var row = [Double]()
    let tempFreq = (0..<lengthOfArray/2).map{i in i*2}
    let freq = tempFreq.map({Double($0)})
    
    var cumSum = 0.0
    var mdfIndex = -1
    
    for i in 1...8{
        
        tempVec = extractCol(power_array, electrode: i)
        let truncatedVec = tempVec[0...63]
        tempSum = truncatedVec.reduce(0, combine:+)/(2.0)
        
        cumSum = 0.0
        mdfIndex = -1

        
        while cumSum < tempSum {
            mdfIndex += 1
            cumSum += tempVec[mdfIndex]
        }

        let temp = (tempSum-(cumSum-tempVec[mdfIndex]))/(tempVec[mdfIndex])
        row.append(Double(freq[mdfIndex])+(2.0*temp)-1.0)
    }
    
    medFreq.append(row)
    
    
}


func calRateOfChange(value_array: [[Double]]) -> [Double] {
    
    var tempVec: [Double] = []
    let tempCountVec = Array(0..<value_array.count)
    let countVec = tempCountVec.map({Double($0)})
    var row: [Double] = []
    
    for i in 1...8{
        
        tempVec = extractCol(value_array, electrode: i)
        
        let meanx = mean(countVec)
        let meany = mean(tempVec)
        let meanxy = mean(mul(tempVec, y: countVec))
        let meanxx = mean(mul(countVec, y: countVec))
        
        let ror = (meanx * meany - meanxy) / (meanx * meanx - meanxx)
            
        row.append(ror)
    
    }
    
    return row
    
}






/*
calMeanAverageValue(emgData2)
meanAvgVal


calRootMeanSquare(emgData2)
rootMeanSqr

computeFFT(emgData2)
power

calMeanFreq(power)
meanFreq

calMedFreq(power)
medFreq

let mnf_rate = calRateOfChange(test_mnf)
print(mnf_rate)
*/




